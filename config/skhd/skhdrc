# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : yabai -m config active_window_border_color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai -m config active_window_border_color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# open terminal, blazingly fast compared to iTerm/Hyper
cmd - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~

###################
# Yabai shortcuts #
###################

# focus window
# for left/right: if it fails it's because this was the west-most/east-most window,
# try to switch displays this will make cmd -h/l work seamlessly over multiple monitors.
cmd - h : yabai -m window --focus west || yabai -m display --focus west
cmd - l : yabai -m window --focus east || yabai -m display --focus east

# for up/down: try to switch focus in a stack first, if this fails (because there is no stack or because we are at the topmost or last element of the stack) focus the north/south window
cmd - j : yabai -m window --focus stack.next || yabai -m window --focus south
cmd - k : yabai -m window --focus stack.prev || yabai -m window --focus north

# move managed window
shift + cmd - h : yabai -m window --warp west || yabai -m window --display west
shift + cmd - l : yabai -m window --warp east || yabai -m window --display east
shift + cmd - j : yabai -m window --warp south 
shift + cmd - k : yabai -m window --warp north

# rotate layout clockwise
shift + cmd - r : yabai -m space --rotate 270

# spaces
cmd - 1 : yabai -m space --focus 1 || yabai -m space --focus recent
cmd - 2 : yabai -m space --focus 2 || yabai -m space --focus recent
cmd - 3 : yabai -m space --focus 3 || yabai -m space --focus recent
cmd - 4 : yabai -m space --focus 4 || yabai -m space --focus recent
cmd - 5 : yabai -m space --focus 5 || yabai -m space --focus recent
cmd - 6 : yabai -m space --focus 6 || yabai -m space --focus recent
cmd - 7 : yabai -m space --focus 7 || yabai -m space --focus recent
cmd - 8 : yabai -m space --focus 8 || yabai -m space --focus recent
cmd - 9 : yabai -m space --focus 9 || yabai -m space --focus recent

# send window to desktop and follow focus
shift + cmd - 1 : yabai -m window --space 1 && yabai -m space --focus 1
shift + cmd - 2 : yabai -m window --space 2 && yabai -m space --focus 2
shift + cmd - 3 : yabai -m window --space 3 && yabai -m space --focus 3
shift + cmd - 4 : yabai -m window --space 4 && yabai -m space --focus 4
shift + cmd - 5 : yabai -m window --space 5 && yabai -m space --focus 5
shift + cmd - 6 : yabai -m window --space 6 && yabai -m space --focus 6
shift + cmd - 7 : yabai -m window --space 7 && yabai -m space --focus 7
shift + cmd - 8 : yabai -m window --space 8 && yabai -m space --focus 8
shift + cmd - 9 : yabai -m window --space 9 && yabai -m space --focus 9

# change cmd+q to close yabai windows
cmd - q : yabai -m window --close

# toggle fullscreen
cmd + ctrl - f : yabai -m window --toggle zoom-fullscreen
cmd + ctrl + alt - f : yabai -m window --toggle native-fullscreen

# Resize windows
alt + cmd - h : yabai -m window --resize left:-100:0; \
                  yabai -m window --resize right:-100:0
alt + cmd - j : yabai -m window --resize bottom:0:100; \
                  yabai -m window --resize top:0:100
alt + cmd - k : yabai -m window --resize top:0:-100; \
                  yabai -m window --resize bottom:0:-100
alt + cmd - l : yabai -m window --resize right:100:0; \
                  yabai -m window --resize left:100:0